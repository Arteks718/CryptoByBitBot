const { users } = require("../../config.js");
const { RestClientV5 } = require("bybit-api");
const { spotAPI } = require("../../keyboards")
const chooseOtherButton = require('../chooseOtherButton.js')
const { Scenes } = require("telegraf");
const { message } = require("telegraf/filters");

const getWalletBalanceSpotScene = new Scenes.BaseScene('walletBalanceSpot')

getWalletBalanceSpotScene.enter(async ctx => {
  let user = await users.findOne({
    idTelegram: ctx.chat.id,
    chooseButtonAPI: true,
    apiKey: { $exists: true },
    status: "walletBalanceSpot",
  });
  getWalletBalanceSpot(ctx, user)
})

const getWalletBalanceSpot = async(ctx, user) => {
  if (user) {
    ctx.reply("–í–≤–µ–¥—ñ—Ç—å —Å–∏–º–≤–æ–ª, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: BTC, usdt, BiT. –ê–±–æ —Å–ª–æ–≤–æ '–£—Å—ñ' –¥–ª—è –≤–∏–≤–µ–¥–µ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –±–∞–ª–∞–Ω—Å —É—Å—ñ—Ö –≤–∞–ª—é—Ç");
    const clientByBit = new RestClientV5({
      key: user.apiKey,
      secret: user.apiSecret,
      testnet: false,
      recv_window: 5000,
    });

    getWalletBalanceSpotScene.on(message("text"), async ctx => {
      let otherButton;
      await chooseOtherButton(ctx, ctx.message.text).then(value => {otherButton = value})
      if(otherButton == false) {
        if(ctx.message.text.match(/^[A-Za-z]/)) {
          clientByBit.getWalletBalance({accountType: "SPOT", coin: ctx.message.text.toUpperCase()})
            .then(async (result) => {
              if(result.retCode == 0) {
                await users.updateOne(
                  { idTelegram: ctx.chat.id },
                  { $set: { status: "spotMarket"}}  
                )
                await specificCoin(ctx, result.result.list[0].coin[0]);
                await ctx.reply("‚úÖ–û–ø–µ—Ä–∞—Ü—ñ—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É —É—Å–ø—ñ—à–Ω–∞‚úÖ", spotAPI);
                ctx.scene.leave();
                ctx.scene.enter('spotMarket')
              } 
              else 
                throw new Error(result.retCode);
            })
            .catch((err) => {
              ctx.reply("‚ùå–ü–æ–º–∏–ª–∫–∞ –≤–∏–≤–µ–¥–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø—Ä–æ –ø–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å");
              console.log(err);
            });
        } else if (ctx.message.text.match(/–£—Å—ñ/)) {
          clientByBit.getWalletBalance({ accountType: "SPOT" })
            .then(async (result) => {
              console.log(result)
              if(result.retCode == 0) {
                console.log(result.result.list[0])
                if(result.result.list[0].coin.length != 0) {
                  await users.updateOne(
                    { idTelegram: ctx.chat.id },
                    { $set: { status: "spotMarket"}}  
                  )
                  await ctx.reply("‚úÖ–û–ø–µ—Ä–∞—Ü—ñ—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É —É—Å–ø—ñ—à–Ω–∞‚úÖ", spotAPI);
                  const list = result.result.list[0].coin;
                  list.forEach((coin) => specificCoin(ctx, coin));
                  ctx.scene.leave()
                  ctx.scene.enter('spotMarket')
                }
                else
                  ctx.reply(`–°–ø–∏—Å–æ–∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –∑ –±–∞–ª–∞–Ω—Å–æ–º –ø—É—Å—Ç–∏–π üòî`)
              }
              else
                throw new Error(result.retCode);
            })
            .catch((err) => {
              ctx.reply("‚ùå–ü–æ–º–∏–ª–∫–∞ –≤–∏–≤–µ–¥–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø—Ä–æ –ø–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å");
              console.log(err);
            });
        }
        else
          ctx.reply("‚ùå–ü–æ–º–∏–ª–∫–∞, –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥–µ–Ω–æ –∑–∞–ø–∏—Ç getWalletBalance. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
       }
    })
  } 
  else{
    ctx.reply("‚ùå–ü–æ–º–∏–ª–∫–∞, —Ñ—É–Ω–∫—Ü—ñ—è –Ω–µ –æ–±—Ä–∞–Ω–∞, –∞–±–æ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å –¥–æ –¥–∞–Ω–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó‚ùå")
    ctx.scene.leave()
    ctx.scene.enter('spotMarket')
  } 
}

const specificCoin = (ctx, result) => {
  let resultString = "";
  if (result.coin) 
    resultString += `<b>–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞:</b> ${result.coin}\n`;
  if (result.equity && result.equity != 0)
    resultString += `<b>–ö–∞–ø–∏—Ç–∞–ª –ø–æ—Ç–æ—á–Ω–æ—ó –º–æ–Ω–µ—Ç–∏:</b> ${result.equity}\n`;
  if (result.usdValue && result.usdValue != 0)
    resultString += `<b>–í–∞—Ä—Ç—ñ—Å—Ç—å —É –¥–æ–ª–∞—Ä–∞—Ö –°–®–ê:</b> ${result.usdValue}$\n`;
  if (result.walletBalance && result.walletBalance != 0)
    resultString += `<b>–ë–∞–ª–∞–Ω—Å –º–æ–Ω–µ—Ç–∏ –≤ –≥–∞–º–∞–Ω—Ü—ñ:</b> ${result.walletBalance}\n`;
  if(result.free)
    resultString += `<b>–î–æ—Å—Ç—É–ø–Ω–∏–π –±–∞–ª–∞–Ω—Å –¥–ª—è —Å–ø–æ—Ç –≥–∞–º–∞–Ω—Ü—è:</b> ${result.free}\n`
  if(result.locked && result.locked != 0)
    resultString += `<b>–ó–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π –±–∞–ª–∞–Ω—Å –¥–ª—è —Å–ø–æ—Ç –≥–∞–º–∞–Ω—Ü—è:</b> ${result.locked}\n`
  if (result.borrowAmount && result.borrowAmount != 0)
    resultString += `<b>–°—É–º–∞ –ø–æ–∑–∏–∫–∏ –º–æ–Ω–µ—Ç–∏:</b> ${result.borrowAmount}\n`;
  if (result.availableToBorrow && result.availableToBorrow != 0)
    resultString += `<b>–î–æ—Å—Ç—É–ø–Ω–∞ —Å—É–º–∞ –¥–ª—è –∑–∞–ø–æ–∑–∏—á–µ–Ω–Ω—è:</b> ${result.availableToBorrow}\n`;
  if (result.availableToWithdraw && result.availableToWithdraw != 0)
    resultString += `<b>–î–æ—Å—Ç—É–ø–Ω–∞ —Å—É–º–∞ –¥–ª—è –≤–∏–≤–µ–¥–µ–Ω–Ω—è:</b> ${result.availableToWithdraw}\n`;
  if (result.accruedInterest && result.accruedInterest != 0)
    resultString += `<b>–ù–∞—Ä–∞—Ö–æ–≤–∞–Ω—ñ –≤—ñ–¥—Å–æ—Ç–∫–∏:</b> ${result.accruedInterest}\n`;
  if (result.totalOrderIM && result.totalOrderIM != 0)
    resultString += `<b>–ü–æ–ø–µ—Ä–µ–¥–Ω—å–æ –∑–∞–π–Ω—è—Ç–∏–π –∑–∞–ø–∞—Å –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</b> ${result.totalOrderIM}\n`;
  if (result.totalPositionIM && result.totalPositionIM != 0)
    resultString += `<b>–°—É–º–∞ –ø–æ—á–∞—Ç–∫–æ–≤–æ—ó –º–∞—Ä–∂—ñ –≤—Å—ñ—Ö –ø–æ–∑–∏—Ü—ñ–π + –ü–æ–ø–µ—Ä–µ–¥–Ω—å–æ –∑–∞–π–Ω—è—Ç–∞ –ª—ñ–∫–≤—ñ–¥–∞—Ü—ñ–π–Ω–∞ –∫–æ–º—ñ—Å—ñ—è:</b> ${result.totalPositionIM}\n`;
  if (result.totalPositionMM && result.totalPositionMM != 0)
    resultString += `<b>–°—É–º–∞ –º–∞—Ä–∂—ñ –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è –¥–ª—è –≤—Å—ñ—Ö –ø–æ–∑–∏—Ü—ñ–π:</b> ${result.totalPositionMM}\n`;
  if (result.unrealisedPnl && result.unrealisedPnl != 0)
    resultString += `<b>–ù–µ—Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ –ø—Ä–∏–±—É—Ç–∫–∏ —Ç–∞ –∑–±–∏—Ç–∫–∏:</b> ${result.unrealisedPnl}\n`;
  if (result.cumRealisedPnl && result.cumRealisedPnl != 0)
    resultString += `<b>–°—É–∫—É–ø–Ω—ñ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ –ø—Ä–∏–±—É—Ç–∫–∏ —Ç–∞ –∑–±–∏—Ç–∫–∏:</b> ${result.cumRealisedPnl}`;
  return ctx.replyWithHTML(resultString);
};

module.exports = { getWalletBalanceSpotScene }