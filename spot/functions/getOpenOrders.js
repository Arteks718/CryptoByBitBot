const { users } = require("../../config");
const { RestClientV5 } = require("bybit-api");
const { spotAPI } = require("../../keyboards")
const chooseOtherButton = require('../chooseOtherButton.js')
const { Scenes } = require("telegraf");
const { message } = require("telegraf/filters");

const getOpenOrdersSpotScene = new Scenes.BaseScene('getOpenOrdersSpot')

getOpenOrdersSpotScene.enter(async ctx => {
  let user = await users.findOne({
    idTelegram: ctx.chat.id,
    chooseButtonAPI: true,
    apiKey: { $exists: true },
    status: "getOpenOrdersSpot",
  });
  getOpenOrdersSpot(ctx, user);
})

const getOpenOrdersSpot = async(ctx, user) => {
  if (user) {
    ctx.reply("–í–≤–µ–¥—ñ—Ç—å —Å–∏–º–≤–æ–ª –∑–∞ —è–∫–∏–º –±—É–¥–µ –ø–æ—à—É–∫ –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: BTCUSDT, ethusdt, BitUsDt")
    const clientByBit = new RestClientV5({
      key: user.apiKey,
      secret: user.apiSecret,
      testnet: false,
      recv_window: 10000,
    });

    getOpenOrdersSpotScene.on(message("text"), async ctx => {
      let otherButton;
      await chooseOtherButton(ctx, ctx.message.text).then(value => {otherButton = value})
      if(otherButton == false) {
        if(ctx.message.text.match(/^[A-Za-z]/)) {
          clientByBit.getActiveOrders({category: 'spot', symbol: ctx.message.text.toUpperCase()}, )
            .then(async result => {
              if(result.retCode == 0){
                console.log(result)
                if(result.result.list.length != 0){
                  await users.updateOne(
                    { idTelegram: ctx.chat.id },
                    { $set: { status: "spotMarket"}}  
                  )
                  ctx.reply("‚úÖ–û–ø–µ—Ä–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞‚úÖ", spotAPI);
                  result.result.list.forEach(order => infoOutput(ctx, order))
                  ctx.scene.leave();
                  ctx.scene.enter('spotMarket')
                } 
                else 
                  ctx.reply(`–°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å –∑–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ—é ${ctx.message.text.toUpperCase()} –ø—É—Å—Ç–∏–π üòî`)
              } 
              else 
                ctx.reply(`‚ùå–ü–æ–º–∏–ª–∫–∞: ${result.retMsg}`)
            })
            .catch(error => {
              ctx.reply("‚ùå–ü–æ–º–∏–ª–∫–∞ –≤–∏–≤–µ–¥–µ–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å");
              console.log(error)
            })
        }
        else
          ctx.reply("‚ùå–ü–æ–º–∏–ª–∫–∞, –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥–µ–Ω–æ –∑–∞–ø–∏—Ç. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
      }
    })
  }
  else {
    ctx.reply("‚ùå–ü–æ–º–∏–ª–∫–∞, —Ñ—É–Ω–∫—Ü—ñ—è –Ω–µ –æ–±—Ä–∞–Ω–∞, –∞–±–æ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å –¥–æ –¥–∞–Ω–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó‚ùå")
    ctx.scene.leave()
    ctx.scene.enter('spotMarket')
  }
}

const infoOutput = (ctx, result) => {
  let resultString = "";
  if(result.symbol)
    resultString += `<b>–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞:</b> ${result.symbol}\n`
  if(result.side)
    resultString += `<b>–ë—ñ–∫ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</b> `;
      (result.side == 'Buy') ? resultString += `–∫—É–ø—ñ–≤–ª—è\n` : resultString += `–ø—Ä–æ–¥–∞–∂\n`
  if(result.price)
    resultString += `<b>–¶—ñ–Ω–∞:</b> ${result.price}\n`
  if(result.qty)
    resultString += `<b>–ö—ñ–ª—å–∫—ñ—Å—Ç—å:</b> ${result.qty}\n`
  if(result.orderType)
    resultString += `<b>–¢–∏–ø –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</b> `;
      (result.orderType == 'Limit') ? resultString += `–ª—ñ–º—ñ—Ç–Ω–∏–π\n` : resultString += `—Ä–∏–Ω–∫–æ–≤–∏–π\–ø`
  if(result.orderId)
    resultString += `<b>–ù–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</b> ${result.orderId}\n`
  if(result.orderLinkId)
    resultString += `<b>–ö–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</b> ${result.orderLinkId}\n`
  if(result.stopOrderType)
    resultString += `<b>–¢–∏–ø –∑—É–ø–∏–Ω–∫–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</b> ${result.stopOrderType}\n`;
  if(result.orderStatus)
    resultString += `<b>–°—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</b> ${result.orderStatus}\n`
  if(result.takeProfit && result.takeProfit!= 0)
    resultString += `<b>–°—Ç–∞–≤–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–∏–±—É—Ç–∫—É:</b> ${result.takeProfit}\n`
  if(result.stopLoss && result.stopLoss!= 0)
    resultString += `<b>–°—Ç–∞–≤–∫–∞ –∑—É–ø–∏–Ω–∫–∏ –≤—Ç—Ä–∞—Ç–∏:</b> ${result.stopLoss}\n`
  if(result.triggerPrice && result.triggerPrice != 0)
    resultString += `<b>–¢—Ä–∏–≥–µ—Ä–Ω–∞ —Ü—ñ–Ω–∞:</b> ${result.triggerPrice}\n`
  
  ctx.replyWithHTML(resultString);
}

module.exports = { getOpenOrdersSpotScene }