const { bot, client } = require("./config.js");

module.exports = async (ctx) => {
  try {
    // –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
    await client.connect();
    console.log("Connect completed");
    const users = client.db("cryptobybitbot").collection("users");

    await users.findOneAndDelete({ idTelegram: ctx.chat.id });
    // –ü–æ—à—É–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —É –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
    greeting(ctx, users);

  } catch (error) {
    console.log(error);
  }
};

bot.action("yesAPI", async (ctx) => chooseButtonAPI(ctx, true));
bot.action("noAPI", async (ctx) => chooseButtonAPI(ctx, false));

// –ø–µ—Ä–µ–∫–∏–Ω—É—Ç–∏ –∑—ñ —Å—Ç–∞—Ä—Ç—É –≤ –æ—Å—å —Ü—é —Ñ—É–Ω–∫—Ü—ñ—é –º–æ–º–µ–Ω—Ç–∏ –∑ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è–º
const greeting = async (ctx, db) => {
  if (await db.findOne({ idTelegram: ctx.chat.id })) {
    ctx.reply("–†–∞–¥–∏–π –∑–Ω–æ–≤—É –í–∞—Å –±–∞—á–∏—Ç–∏");
  } else {
    ctx.reply("–ü—Ä–∏–≤—ñ—Ç, –≤—ñ—Ç–∞—é —Ç–µ–±–µ —É –±–æ—Ç—ñ CryptoByBitBot!üôÇ");
    await ctx.reply(
      "–î–ª—è –ø—Ä–∞—Ü–µ–∑–¥—ñ–±–Ω–æ—Å—Ç—ñ –±—ñ–ª—å—à–æ—Å—Ç—ñ —Ñ—É–Ω–∫—Ü—ñ–π —Ç–æ–±—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–≤–µ—Å—Ç–∏ —Å–≤—ñ–π API Key —Ç–∞ API Secret Key"
    );

    await db.insertOne({
      idTelegram: ctx.chat.id,
      status: "buttonSelection",
    });

    await ctx.replyWithHTML("–ß–∏ –±–∞–∂–∞—î—Ç–µ –≤–≤–µ—Å—Ç–∏ –∫–ª—é—á—ñ?", {
      reply_markup: {
        inline_keyboard: [
          [{ text: "–¢–∞–∫", callback_data: "yesAPI" }],
          [{ text: "–ù—ñ", callback_data: "noAPI" }],
        ],
      },
    });
  }
};

const chooseButtonAPI = async (ctx, button) => {
  try {
    // –í–∏–¥–∞–ª–µ–Ω–Ω—è —ñ–Ω–ª–∞–π–Ω –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
    ctx.deleteMessage(ctx.inlineMessageId);
    const users = client.db("cryptobybitbot").collection("users");
    if (button) {
      users.updateOne(
        { idTelegram: ctx.chat.id },
        { $set: { status: "inputAPIKey" , chooseButtonAPI: button}}
      );
      await inputAPIKeys(ctx, users);
    } else{
      ctx.reply("–ó—Ä–æ–∑—É–º—ñ–≤, —Ç–æ–¥—ñ –≤ –±—É–¥—å —è–∫–∏–π —ñ–Ω—à–∏–π –º–æ–º–µ–Ω—Ç —É –∫–æ–º–∞–Ω–¥—ñ /settings –≤–∏ –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ —Å–≤–æ—ó API ");
      users.updateOne(
        { idTelegram: ctx.chat.id },
        { $set: { status: "mainMenu" , chooseButtonAPI: button}}
      );
    }
  } catch (error) {
    console.log(error);
  }
};

const inputAPIKeys = async (ctx, db) => {
  await ctx.reply(
    "–í–≤–µ–¥—ñ—Ç—å API Key —Ç–∞ API Secret Key —É —Ñ–æ—Ä–º–∞—Ç—ñ APIKEY:APISECRET"
  );
  try {
    bot.on("text", async (ctx) => {
      // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É APIKEY:APISECRET
      if (/^[A-Za-z0-9–∞-—è—ë—ñ]{18}:[A-Za-z0-9–∞-—è—ë—ñ]{36}/.test(ctx.message.text)) {
        const arrayOfStrings = ctx.message.text.split(":");
        db.updateOne(
          { idTelegram: ctx.chat.id },
          { $set: { status: "mainMenu", apiKey: arrayOfStrings[0], apiSecret: arrayOfStrings[1] } });
      } else {
        ctx.reply("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥–µ–Ω—ñ API –∫–ª—é—á—ñ. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
      }
    });
  } catch (error) {
    console.log(error);
  }
};

module.exports = { inputAPIKeys };