const { bot, client } = require("./config.js");
const { RestClientV5 } = require("bybit-api");

module.exports = async (ctx) => {
  try {
    // –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
    await client.connect();
    console.log("Connect completed");
    const users = client.db("cryptobybitbot").collection("users");

    await users.findOneAndDelete({ idTelegram: ctx.chat.id });
    // –ü–æ—à—É–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —É –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
    if (await users.findOne({ idTelegram: ctx.chat.id })) {
      ctx.reply("–†–∞–¥–∏–π –∑–Ω–æ–≤—É –í–∞—Å –±–∞—á–∏—Ç–∏");
    } else {
      ctx.reply("–ü—Ä–∏–≤—ñ—Ç, –≤—ñ—Ç–∞—é —Ç–µ–±–µ —É –±–æ—Ç—ñ CryptoByBitBot!üôÇ");
      await ctx.reply(
        "–î–ª—è –ø—Ä–∞—Ü–µ–∑–¥—ñ–±–Ω–æ—Å—Ç—ñ –±—ñ–ª—å—à–æ—Å—Ç—ñ —Ñ—É–Ω–∫—Ü—ñ–π —Ç–æ–±—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–≤–µ—Å—Ç–∏ —Å–≤—ñ–π API Key —Ç–∞ API Secret Key"
      );

      await users.insertOne({
        idTelegram: ctx.chat.id,
        status: "buttonSelection",
      });

      await ctx.replyWithHTML("–ß–∏ –±–∞–∂–∞—î—Ç–µ –≤–≤–µ—Å—Ç–∏ –∫–ª—é—á—ñ?", {
        reply_markup: {
          inline_keyboard: [
            [{ text: "–¢–∞–∫", callback_data: "yesAPI" }],
            [{ text: "–ù—ñ", callback_data: "noAPI" }],
          ],
        },
      });
    }
  } catch (error) {
    console.log(error);
  }
};

bot.action("yesAPI", async (ctx) => chooseButtonAPI(ctx, true));
bot.action("noAPI", async (ctx) => chooseButtonAPI(ctx, false));

// –ø–µ—Ä–µ–∫–∏–Ω—É—Ç–∏ –∑—ñ —Å—Ç–∞—Ä—Ç—É –≤ –æ—Å—å —Ü—é —Ñ—É–Ω–∫—Ü—ñ—é –º–æ–º–µ–Ω—Ç–∏ –∑ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è–º
const greeting = (ctx) => {};

// —Ñ—É–Ω–∫—Ü—ñ—è, —è–∫–∞ –π–¥–µ –ø—ñ—Å–ª—è –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –¥–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –æ–±–∏—Ä–∞—î —á–∏ –≤–≤–æ–¥–∏—Ç–∏ –∫–ª—é—á—ñ, —á–∏ –Ω–µ –≤–≤–æ–¥–∏—Ç–∏
// —Ç—Ä–µ–±–∞ –ø—Ä–∏–¥—É–º–∞—Ç–∏ —è–∫ –¥–æ–¥–∞–≤–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –Ω–æ–≤–µ –ø–æ–ª–µ chooseAPI
// —Ç–æ–±—Ç–æ –∑—Ä–æ–±–∏—Ç–∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É –∫—É–¥–∏ –∑–∞–ø–∏—Å—É–≤–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
const chooseButtonAPI = async (ctx, button) => {
  try {
    // –í–∏–¥–∞–ª–µ–Ω–Ω—è —ñ–Ω–ª–∞–π–Ω –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
    ctx.deleteMessage(ctx.inlineMessageId);
    if (button) {
      const users = client.db("cryptobybitbot").collection("users");
      users.updateOne(
        { idTelegram: ctx.chat.id },
        { $set: { status: "inputAPIKey" } }
      );
      await inputAPIKeys(ctx, users);
    }
  } catch (error) {
    console.log(error);
  }
};

const inputAPIKeys = async (ctx, db) => {
  const keys = {
    APIKey: "",
    APISecret: "",
  };

  try {
    // –í–≤–µ–¥–µ–Ω–Ω—è API key
    await ctx.reply("–í–≤–µ–¥—ñ—Ç—å API key");
    bot.on("text", async (ctx) => {
      if (await db.findOne({ idTelegram: ctx.chat.id, status: "inputAPIKey" })) {
        console.log("test success");
        (/^[A-Za-z0-9]{18}$/.test(ctx.message.text))
          ? db.updateOne(
              { idTelegram: ctx.chat.id },
              { $set: { status: "inputAPISecret", apiKey: ctx.message.text } })
          : ctx.reply("API Key –ø–æ–≤–∏–Ω–µ–Ω —Å–∫–ª–∞–¥–∞—Ç–∏—Å—è –∑ 18 —Å–∏–º–≤–æ–ª—ñ–≤. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
      } else {
        console.log("test error");
      }
    });

    if (
      await db.findOne({ idTelegram: ctx.chat.id, status: "inputAPISecret" })
    ) {
      console.log("test add api secret");
      bot.on("text", (ctx) => {
        if (/^[A-Za-z0-9]{36}$/.test(ctx.message.text)) {
          db.updateOne(
            { idTelegram: ctx.chat.id },
            { $set: { status: "mainMenu", apiSecret: ctx.message.text } }
          );
        } else {
          ctx.reply(
            "API Key –ø–æ–≤–∏–Ω–µ–Ω —Å–∫–ª–∞–¥–∞—Ç–∏—Å—è –∑ 36 —Å–∏–º–≤–æ–ª—ñ–≤. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑."
          );
        }
      });
    }

    // bot.hears(/^[A-Za-z0-9]{18}/, (ctx) => {keys.APIKey = ctx.message.text})

    // // –í–≤–µ–¥–µ–Ω–Ω—è API Secret
    // await ctx.reply("–í–≤–µ–¥—ñ—Ç—å API Secret")
    // bot.hears(/^[A-Za-z0-9]{36}/, (ctx) => {keys.APISecret = ctx.message.text })

    // // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –Ω–æ–≤–∏–º–∏ –∫–ª—é—á–∞–º–∏
    // await db.updateOne({ idTelegram: ctx.chat.id}, { $set: [{ apiKey: keys.APIKey}, { apiSecret: keys.APISecret}]})
  } catch (error) {
    console.log(error);
  }
};

/*
let chooseApiKey,
  API_KEY = "",
  API_SECRET = "";
const useTestnet = false,
  recvWindow = 5000;

//      Keyboards

// const keyboardApiYes = Keyboard.make(
//   [
//     "Symbol",
//     "Order book",
//     "Query Kline",
//     "Latest Big Deal",
//     "Get Active Order",
//     "Cancel Active Order",
//     "Place Active Order",
//     "Cancel All Active Orders",
//     "Get Wallet Balance",
//   ],
//   {
//     pattern: [4, 2, 2],
//   }
// );

// const keyboardApiNo = Keyboard.make([
//   "Symbol",
//   "Order book",
//   "Query Kline",
//   "Latest Big Deal",
// ]);


//–ù–∞–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è yesApi –∏ noAPI, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç chooseAPiKey 


bot.action("yesAPI", async (ctx) => {
  ctx.deleteMessage(ctx.inlineMessageId);
  chooseApiKey = true;
  if (API_KEY == "" && API_SECRET == "") {
    if (chooseApiKey == true) {
      ctx.reply("–í–≤–µ–¥—ñ—Ç—å APIKey:APISecret");
    }
  } else {
    ctx.reply(
      "–í–∞—à—ñ –∫–ª—é—á—ñ –≤–∂–µ –±—É–ª–æ –≤–≤–µ–¥–µ–Ω–æ\nAPI Key: " +
        API_KEY +
        "\nAPI Secret: " +
        API_SECRET,
      keyboardApiYes.reply()
    );
  }
});

//FUNCTION - NoApi action
bot.action("noAPI", (ctx) => {
  ctx.deleteMessage(ctx.inlineMessageId);
  chooseApiKey = false;
  ctx.reply(
    "–î–æ–±—Ä–µ, —è–∫—â–æ –ø–µ—Ä–µ–¥—É–º–∞—î—Ç–µ, —Ç–æ –∑–º–æ–∂–µ—Ç–µ —É –±—É–¥—å-—è–∫–∏–π —á–∞—Å –¥–æ–¥–∞—Ç–∏ —Å–≤–æ—ó –∫–ª—é—á—ñ"
  );
  if (API_KEY == "" && API_SECRET == "") {
    if (chooseApiKey == false) {
      ctx.reply(
        "–¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—å —Ñ—É–Ω–∫—Ü—ñ—è–º–∏ –±–æ—Ç–∞",
        keyboardApiNo.reply()
      );
    }
  } else {
    ctx.reply(
      "–í–∞—à—ñ –∫–ª—é—á—ñ –≤–∂–µ –±—É–ª–æ –≤–≤–µ–¥–µ–Ω–æ\nAPI Key: " +
        API_KEY +
        "\nAPI Secret: " +
        API_SECRET,
      keyboardApiYes.reply()
    );
  }
});

//BUTTON - Get APIKEY and APISECRET
bot.hears(/^[A-Za-z0-9–∞-—è—ë—ñ]{18}:[A-Za-z0-9–∞-—è—ë—ñ]{36}/, async (ctx) => {
  let message = ctx.message.text;
  var arrayOfStrings = message.split(":");
  API_KEY = arrayOfStrings[0];
  API_SECRET = arrayOfStrings[1];
  if (API_KEY.length == 18) {
    await ctx.reply("–í–∞—à API Key: " + API_KEY);
    if (API_SECRET.length == 36) {
      await ctx.reply("–í–∞—à API Secret: " + API_SECRET);
      chooseApiKey = true;
      //TODO –ø–µ—Ä–µ–¥–µ–ª–∞—Ç—å –¥–ª—è –≤—Å–µ—Ö —Ä—ã–Ω–∫–æ–≤ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
      // const clientInverse = new InverseClient({
      //   key: API_KEY,
      //   secret: API_SECRET,
      //   testnet: useTestnet,
      //   recv_window: recvWindow,
      // });
    } else {
      ctx.reply("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç API Secret");
    }
  } else {
    ctx.reply("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç API Key");
  }
  if (chooseApiKey == true) {
    ctx.reply(
      "–¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—å —Ñ—É–Ω–∫—Ü—ñ—è–º–∏ –±–æ—Ç–∞",
      keyboardApiYes.reply()
    );
  }
});

// module.exports = function botStart() {
//   return bot.start(async (ctx) => {
//     await bot.telegram.sendMessage(
//       ctx.chat.id,
//       "–ü—Ä–∏–≤—ñ—Ç, –≤—ñ—Ç–∞—é —Ç–µ–±–µ —É –±–æ—Ç—ñ CryptoByBitBot!",
//       {
//         reply_markup: {
//           remove_keyboard: true,
//         },
//       }
//     );
//     await ctx.reply(
//       "–î–ª—è –ø—Ä–∞—Ü–µ–∑–¥—ñ–±–Ω–æ—Å—Ç—ñ –±—ñ–ª—å—à–æ—Å—Ç—ñ —Ñ—É–Ω–∫—Ü—ñ–π —Ç–æ–±—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–≤–µ—Å—Ç–∏ —Å–≤—ñ–π API Key —Ç–∞ API Secret Key "
//     );
//     await ctx.replyWithHTML("–ß–∏ –±–∞–∂–∞—î—Ç–µ –≤–≤–µ—Å—Ç–∏ –∫–ª—é—á—ñ?", {
//       reply_markup: {
//         inline_keyboard: [
//           [{ text: "–¢–∞–∫", callback_data: "yesAPI" }],
//           [{ text: "–ù—ñ", callback_data: "noAPI" }],
//         ],
//       },
//     });
//   });
// };

// export { chooseApiKey, API_KEY, API_SECRET, recvWindow };
// export const clientInverse = new InverseClient({
//   key: API_KEY,
//   secret: API_SECRET,
//   testnet: useTestnet,
//   recv_window: recvWindow,
// });
*/
