const { users } = require("../../config");
const { RestClientV5 } = require("bybit-api");
const { directivesAPI } = require("../../keyboards")
const chooseOtherButton = require('../chooseOtherButton.js')
const { Scenes } = require("telegraf");
const { message } = require("telegraf/filters");

const getOrdersHistoryScene = new Scenes.BaseScene('getOrdersHistoryDirevatives')

getOrdersHistoryScene.enter(async ctx => {
  let user = await users.findOne({
    idTelegram: ctx.chat.id,
    chooseButtonAPI: true,
    apiKey: { $exists: true },
    status: "getOrdersHistoryDirevatives",
  });
  getOrdersHistory(ctx, user)
})

const getOrdersHistory = async(ctx, user) => {
  if(user) {
    ctx.replyWithHTML(`–í–≤–µ–¥—ñ—Ç—å –ø–∞—Ä—É —Å–∏–º–≤–æ–ª—ñ–≤, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: BTCUSDT, ethusdt, BiTuSdT.–ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –≤–∏–≤–µ–¥–µ—Ç—å—Å—è 20 –∑–∞–ø–∏—Ç—ñ–≤, –∞–±–æ –≤–∏ –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Ç—ñ–≤(–Ω–µ –º–æ–∂–µ –ø–µ—Ä–µ–≤–∏—â—É–≤–∞—Ç–∏ 50), —è–∫—â–æ –≤–≤–µ—Å—Ç–∏ –∑–∞–ø–∏—Ç –∑–∞ —Ñ–æ—Ä–º–∞—Ç–æ–º:\n\n<b>symbol:limit</b>\n\n–ù–∞–ø—Ä–∏–∫–ª–∞–¥: BTCUSDT:30`);
    const clientByBit = new RestClientV5({
      key: user.apiKey,
      secret: user.apiSecret,
      testnet: false,
      recv_window: 5000,
    });

    getOrdersHistoryScene.on(message("text"), async ctx => {
      let otherButton;
      await chooseOtherButton(ctx, ctx.message.text).then(value => {otherButton = value})
      if(otherButton == false) { 
        if(ctx.message.text.match(/^[A-Za-z]+:\d+$/g)) {
          const arrayOfStrings = ctx.message.text.split(":");
          if(arrayOfStrings[1] < 50) {
            clientByBit.getHistoricOrders({category: 'linear', symbol: arrayOfStrings[0].toUpperCase(), limit: Number(arrayOfStrings[1])})
              .then(async result => {
                if(result.retCode == 0) {
                  if(result.result.list.length != 0) {
                    await users.updateOne(
                      { idTelegram: ctx.chat.id },
                      { $set: { status: "directivesMarket"}}  
                    )
                    await ctx.reply("‚úÖ–û–ø–µ—Ä–∞—Ü—ñ—è –≤–∏–≤–µ–¥–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó –∑–∞–º–æ–≤–ª–µ–Ω—å, —É—Å–ø—ñ—à–Ω–∞‚úÖ", directivesAPI);
                    result.result.list.forEach(item => infoOutput(ctx,item))
                    ctx.scene.leave();
                   } else {
                    ctx.reply(`–°–ø–∏—Å–æ–∫ —ñ—Å—Ç–æ—Ä—ñ—ó –∑–∞–º–æ–≤–ª–µ–Ω—å –∑–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ—é ${ctx.message.text.toUpperCase()} –ø—É—Å—Ç–∏–π üòî`)
                    ctx.scene.leave();
                   }
                }              
                else
                  throw new Error(result.retCode);
              })
              .catch((err) => {
                ctx.reply("‚ùå–ü–æ–º–∏–ª–∫–∞ –≤–∏–≤–µ–¥–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó –∑–∞–º–æ–≤–ª–µ–Ω—å");
                console.log(err)
              });
          }
          else
            clx.reply("‚ùå–ü–æ–º–∏–ª–∫–∞, –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Ç—ñ–≤ –ø–µ—Ä–µ–≤–∏—â—É—î –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–µ. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∑–Ω–∞—á–µ–Ω–Ω—è –º–µ–Ω—à–µ —Ç–∞ —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")          
        }       
        else if(/^[A-Za-z]+/.test(ctx.message.text)){
          clientByBit.getHistoricOrders({category: 'linear', symbol: ctx.message.text.toUpperCase()})
            .then(async result => {
              if(result.retCode == 0) {
                if(result.result.list.length != 0) {
                  await users.updateOne(
                    { idTelegram: ctx.chat.id },
                    { $set: { status: "directivesMarket"}} 
                  )
                  await ctx.reply("‚úÖ–û–ø–µ—Ä–∞—Ü—ñ—è –≤–∏–≤–µ–¥–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó –∑–∞–º–æ–≤–ª–µ–Ω—å, —É—Å–ø—ñ—à–Ω–∞‚úÖ", directivesAPI);
                  result.result.list.forEach(item => infoOutput(ctx,item))
                  ctx.scene.leave();
                } else {
                  ctx.reply(`–°–ø–∏—Å–æ–∫ —ñ—Å—Ç–æ—Ä—ñ—ó –∑–∞–º–æ–≤–ª–µ–Ω—å –∑–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ—é ${ctx.message.text.toUpperCase()} –ø—É—Å—Ç–∏–π üòî`)
                  ctx.scene.leave();
                }
              }
              else
                throw new Error(result.retCode);
            })
            .catch((err) => {
              ctx.reply("‚ùå–ü–æ–º–∏–ª–∫–∞ –≤–∏–≤–µ–¥–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó –∑–∞–º–æ–≤–ª–µ–Ω—å");
              console.log(err)
          });
        }
      }
    })
  }
  else {
    ctx.reply("‚ùå–ü–æ–º–∏–ª–∫–∞, —Ñ—É–Ω–∫—Ü—ñ—è –Ω–µ –æ–±—Ä–∞–Ω–∞, –∞–±–æ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å –¥–æ –¥–∞–Ω–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó‚ùå")
    ctx.scene.leave();
  }
}

const infoOutput = async (ctx, result) => {
  let resultString = '';
  if(result.symbol)
    resultString += `<b>–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞:</b> ${result.symbol}\n`
  if(result.side)
    resultString += `<b>–°—Ç–æ—Ä–æ–Ω–∞:</b> ${result.side}\n`
  if(result.qty)
    resultString += `<b>–ö—ñ–ª—å–∫—ñ—Å—Ç—å:</b> ${result.qty}\n`
  if(result.price)
    resultString += `<b>–¶—ñ–Ω–∞</b> ${result.price}\n`
  if(result.orderType)
    resultString += `<b>–¢–∏–º –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</b> ${result.orderType}\n`
  if(result.orderId)
    resultString += `<b>–Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</b> ${result.orderId}\n`
  if(result.orderLinkId)
    resultString += `<b>–ö–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</b> ${result.orderLinkId}\n`
  if(result.orderStatus)
    resultString += `<b>–°—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</b> ${result.orderStatus}\n`
  if(result.stopOrderStatus && result.stopOrderStatus != 'UNKNOWN')
    resultString += `<b>–°—Ç–∞—Ç—É—Å –∑—É–ø–∏–Ω–∫–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</b> ${result.stopOrderStatus}\n`
  if(result.takeProfit && result.takeProfit != 'UNKNOWN')
    resultString += `<b>–¶—ñ–Ω–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–∏–±—É—Ç–∫—É:</b> ${result.takeProfit}\n`
  if(result.stopLoss && result.stopLoss != 'UNKNOWN')
    resultString += `<b>–¶—ñ–Ω–∞ –∑—É–ø–∏–Ω–∫–∏ –∑–±–∏—Ç–∫—ñ–≤</b> ${result.stopLoss}\n`
  resultString += `<b>–î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è</b> ${new Date(Number(result.createdTime)).toLocaleString()}`
  await ctx.replyWithHTML(resultString)
}

module.exports = { getOrdersHistoryScene }

// module.exports = async (ctx) => {
//   const user = await users.findOne({
//     idTelegram: ctx.chat.id,
//     chooseButtonAPI: true,
//     apiKey: { $exists: true },
//     status: "getOrdersHistoryDirevatives",
//   });
//   if(user) {
//     ctx.replyWithHTML(`–í–≤–µ–¥—ñ—Ç—å –ø–∞—Ä—É —Å–∏–º–≤–æ–ª—ñ–≤, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: BTCUSDT, ethusdt, BiTuSdT.–ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –≤–∏–≤–µ–¥–µ—Ç—å—Å—è 20 –∑–∞–ø–∏—Ç—ñ–≤, –∞–±–æ –≤–∏ –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Ç—ñ–≤(–Ω–µ –º–æ–∂–µ –ø–µ—Ä–µ–≤–∏—â—É–≤–∞—Ç–∏ 50), —è–∫—â–æ –≤–≤–µ—Å—Ç–∏ –∑–∞–ø–∏—Ç –∑–∞ —Ñ–æ—Ä–º–∞—Ç–æ–º:\n<i>symbol-limit</i>\n–ù–∞–ø—Ä–∏–∫–ª–∞–¥: BTCUSDT-30`);
//     const clientByBit = new RestClientV5({
//       key: user.apiKey,
//       secret: user.apiSecret,
//       testnet: false,
//       recv_window: 5000,
//     });

//     bot.on("message", (ctx) => {
//       if(/^[A-Za-z]+-\d+$/g.test(ctx.message.text)){
//         const arrayOfStrings = ctx.message.text.split("-");
//         if(arrayOfStrings[1] < 50) {
//           clientByBit.getHistoricOrders({category: 'linear', symbol: arrayOfStrings[0].toUpperCase(), limit: Number(arrayOfStrings[1])})
//           .then(async result => {
//             if(result.retCode == 0) {
//               await users.updateOne(
//                 { idTelegram: ctx.chat.id },
//                 { $set: { status: "directivesMarket"}}  
//               )
//               ctx.reply("‚úÖ–û–ø–µ—Ä–∞—Ü—ñ—è –≤–∏–≤–µ–¥–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó –∑–∞–º–æ–≤–ª–µ–Ω—å, —É—Å–ø—ñ—à–Ω–∞‚úÖ", directivesAPI);
//               result.result.list.forEach(item => infoOutput(ctx,item))
//             }              
//             else
//               throw new Error(result.retCode);
//           })
//           .catch((err) => {
//             ctx.reply("‚ùå–ü–æ–º–∏–ª–∫–∞");
//             console.log(err)
//           });
//         }
//         else
//           clx.reply("‚ùå–ü–æ–º–∏–ª–∫–∞, –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Ç—ñ–≤ –ø–µ—Ä–µ–≤–∏—â—É—î –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–µ. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∑–Ω–∞—á–µ–Ω–Ω—è –º–µ–Ω—à–µ —Ç–∞ —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")          
//       }
//       else if(/^[A-Za-z]+/.test(ctx.message.text)){
//         clientByBit.getHistoricOrders({category: 'linear', symbol: ctx.message.text.toUpperCase()})
//           .then(async result => {
//             if(result.retCode == 0) {
//               await users.updateOne(
//                 { idTelegram: ctx.chat.id },
//                 { $set: { status: "directivesMarket"}} 
//               )
//               ctx.reply("‚úÖ–û–ø–µ—Ä–∞—Ü—ñ—è –≤–∏–≤–µ–¥–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó –∑–∞–º–æ–≤–ª–µ–Ω—å, —É—Å–ø—ñ—à–Ω–∞‚úÖ", directivesAPI);
//               result.result.list.forEach(item => infoOutput(ctx,item))
//             }
//             else
//               throw new Error(result.retCode);
//           })
//           .catch((err) => {
//             ctx.reply("‚ùå–ü–æ–º–∏–ª–∫–∞");
//             console.log(err)
//           });
//       }
//     })
//   }
//   else
//     ctx.reply("‚ùå–ü–æ–º–∏–ª–∫–∞, —Ñ—É–Ω–∫—Ü—ñ—è –Ω–µ –æ–±—Ä–∞–Ω–∞, –∞–±–æ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å –¥–æ –¥–∞–Ω–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó‚ùå")
// }